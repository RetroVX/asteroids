export default class phaserControls extends Phaser.Plugins.ScenePlugin{constructor(scene,pluginManager){super(scene,pluginManager),this.scene=scene,this.schemes=[],this.keys=null,this.inputArray=[],this.scene.input.keyboard.on("keycombomatch",function(event,key,data){for(let i=0;i<event.schemes.length;i++)"global"!==event.schemes[0]&&this.getActive().name!==event.schemes[i]||(void 0!==event.onMatch&&event.onMatch(this.scene,event),0===event.counter&&void 0!==event.onMatchOnce&&event.onMatchOnce(this.scene,event),event.counter+=1)},this)}boot(){const eventEmitter=this.systems.events;eventEmitter.once("destroy",function(){for(let i=0;i<this.schemes.length;i++)this.delete(this.schemes[i],!0);this.scene=null,this.schemes=null,this.keys=null},this)}createCursorKeys(active,add,data,onActiveFunc){return null==active&&(active=!1),null==add&&(add=!0),null==data&&(data={},this.cursorKeys={name:"cursorKeysDefault",active:active,controls:{up:"UP",down:"DOWN",left:"LEFT",right:"RIGHT",shift:"SHIFT",space:"SPACE"},data:data,onActive:function(scene,scheme){void 0!==onActiveFunc&&onActiveFunc(scene,scheme)}}),add&&(this.add(this.cursorKeys),active&&this.setActive("cursorKeysDefault")),this.cursorKeys}createWasdKeys(active,add,data,onActiveFunc){return null==active&&(active=!1),null==add&&(add=!0),null==data&&(data={},this.wasdKeys={name:"wasdKeysDefault",active:active,controls:{up:"W",down:"S",left:"A",right:"D",shift:"SHIFT",space:"SPACE"},data:data,onActive:function(scene,scheme){void 0!==onActiveFunc&&onActiveFunc()}}),add&&(this.add(this.wasdKeys),active&&this.setActive("wasdKeysDefault")),this.wasdKeys}add(config){void 0!==config.data&&null!==config.data||(config.data={}),this.schemes.push(config),config.active&&this.setActive(config)}addMultiple(array){array.length>0&&array.forEach(function(config,index){this.schemes.push(config),config.active&&this.setActive(config)})}get(name,active){if(null==name)return this.getActive();null==active&&(active=!1);let getScheme=this.schemes.find(function(s){return s.name===name});return active&&this.setActive(getScheme),getScheme}getActive(name){null==name&&(name=!1);let findScheme=this.schemes.find(function(s){return!0===s.active});return name?findScheme.name:findScheme}getAll(){return this.schemes}switch(scheme){this.setActive(scheme)}setActive(scheme){const scene=this.scene;let getNewScheme;this.schemes.forEach(function(s){s.active&&(s.active=!1),scheme!==s.name&&scheme!==s||(s.active=!0,getNewScheme=s)}),void 0!==getNewScheme.onActive&&getNewScheme.onActive(scene,getNewScheme),this.keys=scene.input.keyboard.addKeys(getNewScheme.controls)}edit(scheme,config){this.schemes.forEach(function(s,index){s.name!==scheme&&s!==scheme||(this.schemes[index]=config)},this)}delete(scheme,destroy){null==destroy&&(destroy=!0);const scene=this.scene;let schemesArray=this.getAll(),nextScheme=!1,currentControls=Object.keys(this.keys);schemesArray.forEach(function(s,index){s.name!==scheme&&s!==scheme||(s.active&&(nextScheme=!0),destroy&&currentControls.forEach(function(key){scene.input.keyboard.removeCapture(this.keys[key].keyCode),scene.input.keyboard.removeKey(this.keys[key])},this),schemesArray.splice(index,1))},this),nextScheme&&this.setActive(schemesArray[0])}createCombo(scheme){const scene=this.scene;void 0!==scheme.maxKeyDelay&&null!==scheme.maxKeyDelay||(scheme.maxKeyDelay=0),void 0!==scheme.resetOnMatch&&null!==scheme.resetOnMatch||(scheme.resetOnMatch=!1),void 0!==scheme.deleteOnMatch&&null!==scheme.deleteOnMatch||(scheme.deleteOnMatch=!1),void 0!==scheme.schemes&&null!==scheme.schemes||(scheme.schemes=["global"]);let combo=scene.input.keyboard.createCombo(scheme.combo,{maxKeyDelay:scheme.maxKeyDelay,resetOnMatch:scheme.resetOnMatch,deleteOnMatch:scheme.deleteOnMatch});return combo.name=scheme.name,combo.data=scheme.data,combo.onMatch=scheme.onMatch,combo.onMatchOnce=scheme.onMatchOnce,combo.schemes=scheme.schemes,combo.counter=0,combo}createKonamiCode(onMatch){const scene=this.scene,konamiCode=[38,38,40,40,37,39,37,39,66,65];let konamiCombo=scene.input.keyboard.createCombo(konamiCode);return konamiCombo.name="konamiCode",konamiCombo.onMatch=onMatch,konamiCombo.schemes=["global"],konamiCombo}recordKeys(){const scene=this.scene,scheme=this.getActive(),keys=this.keys,inputArray=this.inputArray;let currentControls;return Object.keys(keys).forEach(function(key){if(Phaser.Input.Keyboard.JustUp(keys[key])){let inputObj={keyCode:keys[key].keyCode,key:scheme.controls[key],duration:keys[key].duration,lastDown:keys[key].timeDown};inputArray.push(inputObj)}},this),inputArray}enableKeys(){const scene=this.scene;let currentControls;Object.keys(this.keys).forEach(function(key){this.keys[key].enabled=!0},this)}disableKeys(){const scene=this.scene;let currentControls;Object.keys(this.keys).forEach(function(key){this.keys[key].enabled=!1},this)}keyCodeToKey(keyCode){const phaserKeyNames=Object.keys(Phaser.Input.Keyboard.KeyCodes),phaserKeyCodes=Object.values(Phaser.Input.Keyboard.KeyCodes);let keyCodeIsArray=!1,keyArray=[],newKey;return keyCode instanceof Array&&(keyCodeIsArray=!0),phaserKeyCodes.forEach(function(key,index){keyCodeIsArray&&keyCode.forEach(function(kCode){kCode===key&&keyArray.push(phaserKeyNames[index])}),keyCodeIsArray||keyCode!==key||(newKey=phaserKeyNames[index])},this),keyCodeIsArray?keyArray:newKey}debugText(x,y,fontsize,color){const scene=this.scene;let i=0,scheme=this.getActive(),controlsText=scene.add.text(x,y,"Click text to change the control scheme. \n \n"+JSON.stringify(scheme,void 0,2),{fontFamily:"Verdana",fontSize:fontsize,color:color}).setOrigin(.5,.5);controlsText.setInteractive(new Phaser.Geom.Rectangle(0,0,controlsText.width,controlsText.height),Phaser.Geom.Rectangle.Contains),controlsText.on("pointerdown",function(pointer){i<this.schemes.length-1?i++:i=0,scheme=this.schemes[i],this.setActive(this.schemes[i].name),controlsText.setText("Click text to change the control scheme. \n \n"+JSON.stringify(scheme,void 0,2))},this)}}